{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi Map XML The siddhi-map-xml extension is an extension to Siddhi that converts XML messages to/from Siddhi events. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 5.x and above with group id io.siddhi.extension.* from here . Versions 4.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 5.2.0 . Features xml ( Sink Mapper ) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. xml ( Source Mapper ) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-map-xml","text":"The siddhi-map-xml extension is an extension to Siddhi that converts XML messages to/from Siddhi events. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi Map XML"},{"location":"#download","text":"Versions 5.x and above with group id io.siddhi.extension.* from here . Versions 4.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 5.2.0 .","title":"Latest API Docs"},{"location":"#features","text":"xml ( Sink Mapper ) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. xml ( Source Mapper ) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message.","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/4.0.10/","text":"API Docs - v4.0.10 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.10"},{"location":"api/4.0.10/#api-docs-v4010","text":"","title":"API Docs - v4.0.10"},{"location":"api/4.0.10/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.10/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.10/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.10/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.11/","text":"API Docs - v4.0.11 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.11"},{"location":"api/4.0.11/#api-docs-v4011","text":"","title":"API Docs - v4.0.11"},{"location":"api/4.0.11/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.11/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.11/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.11/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.12/","text":"API Docs - v4.0.12 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.12"},{"location":"api/4.0.12/#api-docs-v4012","text":"","title":"API Docs - v4.0.12"},{"location":"api/4.0.12/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.12/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.12/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.12/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.13/","text":"API Docs - v4.0.13 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.13"},{"location":"api/4.0.13/#api-docs-v4013","text":"","title":"API Docs - v4.0.13"},{"location":"api/4.0.13/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.13/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.13/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.13/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.14/","text":"API Docs - v4.0.14 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.14"},{"location":"api/4.0.14/#api-docs-v4014","text":"","title":"API Docs - v4.0.14"},{"location":"api/4.0.14/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.14/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.14/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.14/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.15/","text":"API Docs - v4.0.15 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.15"},{"location":"api/4.0.15/#api-docs-v4015","text":"","title":"API Docs - v4.0.15"},{"location":"api/4.0.15/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.15/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.15/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.15/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.16/","text":"API Docs - v4.0.16 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.16"},{"location":"api/4.0.16/#api-docs-v4016","text":"","title":"API Docs - v4.0.16"},{"location":"api/4.0.16/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.16/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.16/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.16/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.17/","text":"API Docs - v4.0.17 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.17"},{"location":"api/4.0.17/#api-docs-v4017","text":"","title":"API Docs - v4.0.17"},{"location":"api/4.0.17/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.17/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.17/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.17/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.18/","text":"API Docs - v4.0.18 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.18"},{"location":"api/4.0.18/#api-docs-v4018","text":"","title":"API Docs - v4.0.18"},{"location":"api/4.0.18/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.18/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.18/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.18/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.19/","text":"API Docs - v4.0.19 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.19"},{"location":"api/4.0.19/#api-docs-v4019","text":"","title":"API Docs - v4.0.19"},{"location":"api/4.0.19/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.19/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.19/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.19/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.2/","text":"API Docs - v4.0.2 Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"4.0.2"},{"location":"api/4.0.2/#api-docs-v402","text":"","title":"API Docs - v4.0.2"},{"location":"api/4.0.2/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.2/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.2/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.2/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.20/","text":"API Docs - v4.0.20 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.20"},{"location":"api/4.0.20/#api-docs-v4020","text":"","title":"API Docs - v4.0.20"},{"location":"api/4.0.20/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.20/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.20/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.20/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.21/","text":"API Docs - v4.0.21 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.21"},{"location":"api/4.0.21/#api-docs-v4021","text":"","title":"API Docs - v4.0.21"},{"location":"api/4.0.21/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.21/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.21/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.21/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.3/","text":"API Docs - v4.0.3 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.3"},{"location":"api/4.0.3/#api-docs-v403","text":"","title":"API Docs - v4.0.3"},{"location":"api/4.0.3/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.3/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.3/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.3/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.4/","text":"API Docs - v4.0.4 Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"4.0.4"},{"location":"api/4.0.4/#api-docs-v404","text":"","title":"API Docs - v4.0.4"},{"location":"api/4.0.4/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.4/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.4/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.4/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.5/","text":"API Docs - v4.0.5 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.5"},{"location":"api/4.0.5/#api-docs-v405","text":"","title":"API Docs - v4.0.5"},{"location":"api/4.0.5/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.5/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.5/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.5/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.6/","text":"API Docs - v4.0.6 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.6"},{"location":"api/4.0.6/#api-docs-v406","text":"","title":"API Docs - v4.0.6"},{"location":"api/4.0.6/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.6/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.6/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.6/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.7/","text":"API Docs - v4.0.7 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.7"},{"location":"api/4.0.7/#api-docs-v407","text":"","title":"API Docs - v4.0.7"},{"location":"api/4.0.7/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.7/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.7/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.7/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.8/","text":"API Docs - v4.0.8 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.8"},{"location":"api/4.0.8/#api-docs-v408","text":"","title":"API Docs - v4.0.8"},{"location":"api/4.0.8/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.8/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.8/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.8/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.0.9/","text":"API Docs - v4.0.9 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.0.9"},{"location":"api/4.0.9/#api-docs-v409","text":"","title":"API Docs - v4.0.9"},{"location":"api/4.0.9/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.0.9/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING No No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.0.9/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.0.9/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/4.1.0/","text":"API Docs - v4.1.0 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"4.1.0"},{"location":"api/4.1.0/#api-docs-v410","text":"","title":"API Docs - v4.1.0"},{"location":"api/4.1.0/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/4.1.0/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/4.1.0/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/4.1.0/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/5.0.0/","text":"API Docs - v5.0.0 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"5.0.0"},{"location":"api/5.0.0/#api-docs-v500","text":"","title":"API Docs - v5.0.0"},{"location":"api/5.0.0/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.0.0/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/5.0.0/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.0.0/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/5.0.1/","text":"API Docs - v5.0.1 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"5.0.1"},{"location":"api/5.0.1/#api-docs-v501","text":"","title":"API Docs - v5.0.1"},{"location":"api/5.0.1/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.0.1/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/5.0.1/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.0.1/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/5.0.2/","text":"API Docs - v5.0.2 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"5.0.2"},{"location":"api/5.0.2/#api-docs-v502","text":"","title":"API Docs - v5.0.2"},{"location":"api/5.0.2/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.0.2/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/5.0.2/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.0.2/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/5.0.3/","text":"API Docs - v5.0.3 Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"5.0.3"},{"location":"api/5.0.3/#api-docs-v503","text":"","title":"API Docs - v5.0.3"},{"location":"api/5.0.3/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.0.3/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/5.0.3/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.0.3/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/5.0.4/","text":"API Docs - v5.0.4 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , enclosing.element.as.event= BOOL , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No enclosing.element.as.event This can either have value true or false. By default it will be false. This attribute specifies whether the given enclosing element, it self is the event. The user will be able to handle events which doesn't have multiple attributes or when the enclosing event doesnt contain any children. False BOOL Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"5.0.4"},{"location":"api/5.0.4/#api-docs-v504","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.4"},{"location":"api/5.0.4/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.0.4/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/5.0.4/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.0.4/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , enclosing.element.as.event= BOOL , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No enclosing.element.as.event This can either have value true or false. By default it will be false. This attribute specifies whether the given enclosing element, it self is the event. The user will be able to handle events which doesn't have multiple attributes or when the enclosing event doesnt contain any children. False BOOL Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/5.1.0/","text":"API Docs - v5.1.0 Tested Siddhi Core version: 5.1.14 It could also support other Siddhi Core minor versions. Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , enclosing.element.as.event= BOOL , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No enclosing.element.as.event This can either have value true or false. By default it will be false. This attribute specifies whether the given enclosing element, it self is the event. The user will be able to handle events which doesn't have multiple attributes or when the enclosing event doesnt contain any children. False BOOL Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"5.1.0"},{"location":"api/5.1.0/#api-docs-v510","text":"Tested Siddhi Core version: 5.1.14 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.1.0"},{"location":"api/5.1.0/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.1.0/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/5.1.0/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.1.0/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , enclosing.element.as.event= BOOL , fail.on.missing.attribute= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used to specify the enclosing element in case of sending multiple events in same XML message. WSO2 DAS will treat the child element of given enclosing element as events and execute xpath expressions on child elements. If enclosing.element is not provided multiple event scenario is disregarded and xpaths will be evaluated with respect to root element. Root element STRING Yes No enclosing.element.as.event This can either have value true or false. By default it will be false. This attribute specifies whether the given enclosing element, it self is the event. The user will be able to handle events which doesn't have multiple attributes or when the enclosing event doesnt contain any children. False BOOL Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio","title":"xml (Source Mapper)"},{"location":"api/5.2.0/","text":"API Docs - v5.2.0 Tested Siddhi Core version: 5.1.14 It could also support other Siddhi Core minor versions. Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , enclosing.element.as.event= BOOL , fail.on.missing.attribute= BOOL , enable.streaming.xml.content= BOOL , extract.leaf.node.data= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used when custom mapping is enabled to specify the XPath in case of sending multiple events (if XPath consist of multiple elements, or consists of child elements.) using the same XML content or when the event is not in root node. XML mapper will treat the child element/s of given enclosing element as event/s, when enclosing.element.as.event is set to false , and execute xpath expressions available in the attribute mappings on child elements. If enclosing.element is not provided XPaths in the attribute mappings will be evaluated with respect to root element. When enclosing element is used and custom mapping is enabled, the attribute mapping XPaths should be relative to child elements Root element STRING Yes No enclosing.element.as.event This can either have value true or false. XML mapper will treat the child element/s of given enclosing element as event/s, when enclosing.element.as.event is set to false , and attribute mapping should be defined with with respect to the Xpath element's child elements. When enclosing.element.as.event is set to true , the elements (NOT child elements) retrieved from XPath itself will be treated as the event/s and attribute mapping should be defined with with respect to the Xpath element. When enable.streaming.xml is set to true the enclosing.element.as.event value will be set to true by default False BOOL Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No enable.streaming.xml.content This will be used when the XML content is streamed without sending the XML element/ event as a whole. eg: When streaming XML file line by line. false BOOL Yes No extract.leaf.node.data This parameter will enable the event to contain the child element values. This can be used when the given XPath node contains several child elements and also when the child elements have child elements as well. If there are multiple child elements, the event count for one node will get multiplied by the number of child nodes. false BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @map(type='xml', enclosing.element= /events/wrapper/event , enclosing.element.as.event= true , @attributes(volume = volume , price = price , symbol = symbol )) define stream FooStream (symbol string, price float, volume long); Above configuration will do a custom mapping and and get the event element as a whole event in the given XPath. The attribute mapping has to be done with respect to the element mapped in the XPath. Expected input will look like below events wrapper event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /wrapper /events EXAMPLE 3 @map(type='xml', enclosing.element='/events/event', @attributes(symbol='symbol', price='price', volume='volume')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a custom mapping and and get the event element as a whole event in the given XPath. The attribute mapping has to be done with respect to the element mapped in the XPath. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio EXAMPLE 5 @map(type='xml', enclosing.element= /root/child , enable.streaming.xml.content= true , enclosing.element.as.event= true , extract.leaf.node.data= true , fail.on.missing.attribute= false , @attributes(id = /child/@id , timestamp = /child/@timestamp , key = /child/detail/@key , value = /child/detail/@value )) define stream FooStream (id string, timestamp string, key string, value string); Above configuration will do a custom mapping and and get the child element as a whole event in the given XPath when the XML content received in a steaming manner (eg: when a file is read line by line and sent to the XML mapper to map). The attribute mapping has to be done with respect to the element mapped in the XPath which is child In here, the leaf node data is mapped to the child event as well. Expected input will look like below. root bounds minlat=\"53.4281\" minlon=\"-2.4142\" maxlat=\"54.0097\" maxlon=\"-0.9762\"/ child id=\"413229\" timestamp=\"2014-09-10T14:12:48Z\"/ child id=\"414427\" timestamp=\"2018-01-24T23:16:10Z\"/ child id=\"673959\" timestamp=\"2019-10-20T12:07:13Z\" extra id=\"1234\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"company\" value=\"wso2\"/ extra id=\"0987\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"country\" value=\"Sri Lanka\"/ /child . . /root EXAMPLE 6 @map(type='xml', enclosing.element= /root/child , enable.streaming.xml.content= true , enclosing.element.as.event= true , fail.on.missing.attribute= false , @attributes(id = /child/@id , timestamp = /child/@timestamp )) define stream FooStream (id string, timestamp string, key string, value string); Above configuration will do a custom mapping and and get the child element as a whole event in the given XPath when the XML content received in a steaming manner (eg: when a file is read line by line and sent to the XML mapper to map). The attribute mapping has to be done with respect to the element mapped in the XPath which is child Expected input will look like below. root bounds minlat=\"53.4281\" minlon=\"-2.4142\" maxlat=\"54.0097\" maxlon=\"-0.9762\"/ child id=\"413229\" timestamp=\"2014-09-10T14:12:48Z\"/ child id=\"414427\" timestamp=\"2018-01-24T23:16:10Z\"/ child id=\"673959\" timestamp=\"2019-10-20T12:07:13Z\" extra id=\"1234\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"company\" value=\"wso2\"/ extra id=\"0987\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"country\" value=\"Sri Lanka\"/ /child . . /root","title":"5.2.0"},{"location":"api/5.2.0/#api-docs-v520","text":"Tested Siddhi Core version: 5.1.14 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.2.0"},{"location":"api/5.2.0/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.2.0/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/5.2.0/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.2.0/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , enclosing.element.as.event= BOOL , fail.on.missing.attribute= BOOL , enable.streaming.xml.content= BOOL , extract.leaf.node.data= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used when custom mapping is enabled to specify the XPath in case of sending multiple events (if XPath consist of multiple elements, or consists of child elements.) using the same XML content or when the event is not in root node. XML mapper will treat the child element/s of given enclosing element as event/s, when enclosing.element.as.event is set to false , and execute xpath expressions available in the attribute mappings on child elements. If enclosing.element is not provided XPaths in the attribute mappings will be evaluated with respect to root element. When enclosing element is used and custom mapping is enabled, the attribute mapping XPaths should be relative to child elements Root element STRING Yes No enclosing.element.as.event This can either have value true or false. XML mapper will treat the child element/s of given enclosing element as event/s, when enclosing.element.as.event is set to false , and attribute mapping should be defined with with respect to the Xpath element's child elements. When enclosing.element.as.event is set to true , the elements (NOT child elements) retrieved from XPath itself will be treated as the event/s and attribute mapping should be defined with with respect to the Xpath element. When enable.streaming.xml is set to true the enclosing.element.as.event value will be set to true by default False BOOL Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No enable.streaming.xml.content This will be used when the XML content is streamed without sending the XML element/ event as a whole. eg: When streaming XML file line by line. false BOOL Yes No extract.leaf.node.data This parameter will enable the event to contain the child element values. This can be used when the given XPath node contains several child elements and also when the child elements have child elements as well. If there are multiple child elements, the event count for one node will get multiplied by the number of child nodes. false BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @map(type='xml', enclosing.element= /events/wrapper/event , enclosing.element.as.event= true , @attributes(volume = volume , price = price , symbol = symbol )) define stream FooStream (symbol string, price float, volume long); Above configuration will do a custom mapping and and get the event element as a whole event in the given XPath. The attribute mapping has to be done with respect to the element mapped in the XPath. Expected input will look like below events wrapper event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /wrapper /events EXAMPLE 3 @map(type='xml', enclosing.element='/events/event', @attributes(symbol='symbol', price='price', volume='volume')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a custom mapping and and get the event element as a whole event in the given XPath. The attribute mapping has to be done with respect to the element mapped in the XPath. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio EXAMPLE 5 @map(type='xml', enclosing.element= /root/child , enable.streaming.xml.content= true , enclosing.element.as.event= true , extract.leaf.node.data= true , fail.on.missing.attribute= false , @attributes(id = /child/@id , timestamp = /child/@timestamp , key = /child/detail/@key , value = /child/detail/@value )) define stream FooStream (id string, timestamp string, key string, value string); Above configuration will do a custom mapping and and get the child element as a whole event in the given XPath when the XML content received in a steaming manner (eg: when a file is read line by line and sent to the XML mapper to map). The attribute mapping has to be done with respect to the element mapped in the XPath which is child In here, the leaf node data is mapped to the child event as well. Expected input will look like below. root bounds minlat=\"53.4281\" minlon=\"-2.4142\" maxlat=\"54.0097\" maxlon=\"-0.9762\"/ child id=\"413229\" timestamp=\"2014-09-10T14:12:48Z\"/ child id=\"414427\" timestamp=\"2018-01-24T23:16:10Z\"/ child id=\"673959\" timestamp=\"2019-10-20T12:07:13Z\" extra id=\"1234\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"company\" value=\"wso2\"/ extra id=\"0987\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"country\" value=\"Sri Lanka\"/ /child . . /root EXAMPLE 6 @map(type='xml', enclosing.element= /root/child , enable.streaming.xml.content= true , enclosing.element.as.event= true , fail.on.missing.attribute= false , @attributes(id = /child/@id , timestamp = /child/@timestamp )) define stream FooStream (id string, timestamp string, key string, value string); Above configuration will do a custom mapping and and get the child element as a whole event in the given XPath when the XML content received in a steaming manner (eg: when a file is read line by line and sent to the XML mapper to map). The attribute mapping has to be done with respect to the element mapped in the XPath which is child Expected input will look like below. root bounds minlat=\"53.4281\" minlon=\"-2.4142\" maxlat=\"54.0097\" maxlon=\"-0.9762\"/ child id=\"413229\" timestamp=\"2014-09-10T14:12:48Z\"/ child id=\"414427\" timestamp=\"2018-01-24T23:16:10Z\"/ child id=\"673959\" timestamp=\"2019-10-20T12:07:13Z\" extra id=\"1234\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"company\" value=\"wso2\"/ extra id=\"0987\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"country\" value=\"Sri Lanka\"/ /child . . /root","title":"xml (Source Mapper)"},{"location":"api/latest/","text":"API Docs - v5.2.0 Tested Siddhi Core version: 5.1.14 It could also support other Siddhi Core minor versions. Sinkmapper xml (Sink Mapper) This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio Sourcemapper xml (Source Mapper) This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , enclosing.element.as.event= BOOL , fail.on.missing.attribute= BOOL , enable.streaming.xml.content= BOOL , extract.leaf.node.data= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used when custom mapping is enabled to specify the XPath in case of sending multiple events (if XPath consist of multiple elements, or consists of child elements.) using the same XML content or when the event is not in root node. XML mapper will treat the child element/s of given enclosing element as event/s, when enclosing.element.as.event is set to false , and execute xpath expressions available in the attribute mappings on child elements. If enclosing.element is not provided XPaths in the attribute mappings will be evaluated with respect to root element. When enclosing element is used and custom mapping is enabled, the attribute mapping XPaths should be relative to child elements Root element STRING Yes No enclosing.element.as.event This can either have value true or false. XML mapper will treat the child element/s of given enclosing element as event/s, when enclosing.element.as.event is set to false , and attribute mapping should be defined with with respect to the Xpath element's child elements. When enclosing.element.as.event is set to true , the elements (NOT child elements) retrieved from XPath itself will be treated as the event/s and attribute mapping should be defined with with respect to the Xpath element. When enable.streaming.xml is set to true the enclosing.element.as.event value will be set to true by default False BOOL Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No enable.streaming.xml.content This will be used when the XML content is streamed without sending the XML element/ event as a whole. eg: When streaming XML file line by line. false BOOL Yes No extract.leaf.node.data This parameter will enable the event to contain the child element values. This can be used when the given XPath node contains several child elements and also when the child elements have child elements as well. If there are multiple child elements, the event count for one node will get multiplied by the number of child nodes. false BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @map(type='xml', enclosing.element= /events/wrapper/event , enclosing.element.as.event= true , @attributes(volume = volume , price = price , symbol = symbol )) define stream FooStream (symbol string, price float, volume long); Above configuration will do a custom mapping and and get the event element as a whole event in the given XPath. The attribute mapping has to be done with respect to the element mapped in the XPath. Expected input will look like below events wrapper event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /wrapper /events EXAMPLE 3 @map(type='xml', enclosing.element='/events/event', @attributes(symbol='symbol', price='price', volume='volume')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a custom mapping and and get the event element as a whole event in the given XPath. The attribute mapping has to be done with respect to the element mapped in the XPath. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio EXAMPLE 5 @map(type='xml', enclosing.element= /root/child , enable.streaming.xml.content= true , enclosing.element.as.event= true , extract.leaf.node.data= true , fail.on.missing.attribute= false , @attributes(id = /child/@id , timestamp = /child/@timestamp , key = /child/detail/@key , value = /child/detail/@value )) define stream FooStream (id string, timestamp string, key string, value string); Above configuration will do a custom mapping and and get the child element as a whole event in the given XPath when the XML content received in a steaming manner (eg: when a file is read line by line and sent to the XML mapper to map). The attribute mapping has to be done with respect to the element mapped in the XPath which is child In here, the leaf node data is mapped to the child event as well. Expected input will look like below. root bounds minlat=\"53.4281\" minlon=\"-2.4142\" maxlat=\"54.0097\" maxlon=\"-0.9762\"/ child id=\"413229\" timestamp=\"2014-09-10T14:12:48Z\"/ child id=\"414427\" timestamp=\"2018-01-24T23:16:10Z\"/ child id=\"673959\" timestamp=\"2019-10-20T12:07:13Z\" extra id=\"1234\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"company\" value=\"wso2\"/ extra id=\"0987\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"country\" value=\"Sri Lanka\"/ /child . . /root EXAMPLE 6 @map(type='xml', enclosing.element= /root/child , enable.streaming.xml.content= true , enclosing.element.as.event= true , fail.on.missing.attribute= false , @attributes(id = /child/@id , timestamp = /child/@timestamp )) define stream FooStream (id string, timestamp string, key string, value string); Above configuration will do a custom mapping and and get the child element as a whole event in the given XPath when the XML content received in a steaming manner (eg: when a file is read line by line and sent to the XML mapper to map). The attribute mapping has to be done with respect to the element mapped in the XPath which is child Expected input will look like below. root bounds minlat=\"53.4281\" minlon=\"-2.4142\" maxlat=\"54.0097\" maxlon=\"-0.9762\"/ child id=\"413229\" timestamp=\"2014-09-10T14:12:48Z\"/ child id=\"414427\" timestamp=\"2018-01-24T23:16:10Z\"/ child id=\"673959\" timestamp=\"2019-10-20T12:07:13Z\" extra id=\"1234\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"company\" value=\"wso2\"/ extra id=\"0987\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"country\" value=\"Sri Lanka\"/ /child . . /root","title":"latest"},{"location":"api/latest/#api-docs-v520","text":"Tested Siddhi Core version: 5.1.14 It could also support other Siddhi Core minor versions.","title":"API Docs - v5.2.0"},{"location":"api/latest/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/latest/#xml-sink-mapper","text":"This mapper converts Siddhi output events to XML before they are published via transports that publish in XML format. Users can either send a pre-defined XML format or a custom XML message containing event data. Syntax @sink(..., @map(type= xml , validate.xml= BOOL , enclosing.element= STRING ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic validate.xml This parameter specifies whether the XML messages generated should be validated or not. If this parameter is set to true, messages that do not adhere to proper XML standards are dropped. false BOOL Yes No enclosing.element When an enclosing element is specified, the child elements (e.g., the immediate child elements) of that element are considered as events. This is useful when you need to send multiple events in a single XML message. When an enclosing element is not specified, one XML message per every event will be emitted without enclosing. None in custom mapping and events in default mapping STRING Yes No Examples EXAMPLE 1 @sink(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping which will generate below output events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @sink(type='inMemory', topic='{{symbol}}', @map(type='xml', enclosing.element=' portfolio ', validate.xml='true', @payload( StockData Symbol {{symbol}} /Symbol Price {{price}} /Price /StockData ))) define stream BarStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. Inside @payload you can specify the custom template that you want to send the messages out and addd placeholders to places where you need to add event attributes.Above config will produce below output XML message portfolio StockData Symbol WSO2 /Symbol Price 55.6 /Price /StockData /portfolio","title":"xml (Sink Mapper)"},{"location":"api/latest/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/latest/#xml-source-mapper","text":"This mapper converts XML input to Siddhi event. Transports which accepts XML messages can utilize this extension to convert the incoming XML message to Siddhi event. Users can either send a pre-defined XML format where event conversion will happen without any configs or can use xpath to map from a custom XML message. Syntax @source(..., @map(type= xml , namespaces= STRING , enclosing.element= STRING , enclosing.element.as.event= BOOL , fail.on.missing.attribute= BOOL , enable.streaming.xml.content= BOOL , extract.leaf.node.data= BOOL ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic namespaces Used to provide namespaces used in the incoming XML message beforehand to configure xpath expressions. User can provide a comma separated list. If these are not provided xpath evaluations will fail None STRING Yes No enclosing.element Used when custom mapping is enabled to specify the XPath in case of sending multiple events (if XPath consist of multiple elements, or consists of child elements.) using the same XML content or when the event is not in root node. XML mapper will treat the child element/s of given enclosing element as event/s, when enclosing.element.as.event is set to false , and execute xpath expressions available in the attribute mappings on child elements. If enclosing.element is not provided XPaths in the attribute mappings will be evaluated with respect to root element. When enclosing element is used and custom mapping is enabled, the attribute mapping XPaths should be relative to child elements Root element STRING Yes No enclosing.element.as.event This can either have value true or false. XML mapper will treat the child element/s of given enclosing element as event/s, when enclosing.element.as.event is set to false , and attribute mapping should be defined with with respect to the Xpath element's child elements. When enclosing.element.as.event is set to true , the elements (NOT child elements) retrieved from XPath itself will be treated as the event/s and attribute mapping should be defined with with respect to the Xpath element. When enable.streaming.xml is set to true the enclosing.element.as.event value will be set to true by default False BOOL Yes No fail.on.missing.attribute This can either have value true or false. By default it will be true. This attribute allows user to handle unknown attributes. By default if an xpath execution fails or returns null DAS will drop that message. However setting this property to false will prompt DAS to send and event with null value to Siddhi where user can handle it accordingly(ie. Assign a default value) True BOOL Yes No enable.streaming.xml.content This will be used when the XML content is streamed without sending the XML element/ event as a whole. eg: When streaming XML file line by line. false BOOL Yes No extract.leaf.node.data This parameter will enable the event to contain the child element values. This can be used when the given XPath node contains several child elements and also when the child elements have child elements as well. If there are multiple child elements, the event count for one node will get multiplied by the number of child nodes. false BOOL Yes No Examples EXAMPLE 1 @source(type='inMemory', topic='stock', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a default XML input mapping. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 2 @map(type='xml', enclosing.element= /events/wrapper/event , enclosing.element.as.event= true , @attributes(volume = volume , price = price , symbol = symbol )) define stream FooStream (symbol string, price float, volume long); Above configuration will do a custom mapping and and get the event element as a whole event in the given XPath. The attribute mapping has to be done with respect to the element mapped in the XPath. Expected input will look like below events wrapper event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /wrapper /events EXAMPLE 3 @map(type='xml', enclosing.element='/events/event', @attributes(symbol='symbol', price='price', volume='volume')) define stream FooStream (symbol string, price float, volume long); Above configuration will do a custom mapping and and get the event element as a whole event in the given XPath. The attribute mapping has to be done with respect to the element mapped in the XPath. Expected input will look like below. events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events EXAMPLE 4 @source(type='inMemory', topic='stock', @map(type='xml', namespaces = dt=urn:schemas-microsoft-com:datatypes , enclosing.element= //portfolio , @attributes(symbol = company/symbol , price = price , volume = volume ))) define stream FooStream (symbol string, price float, volume long); Above configuration will perform a custom XML mapping. In the custom mapping user can add xpath expressions representing each event attribute using @attribute annotation. Expected input will look like below. portfolio xmlns:dt=\"urn:schemas-microsoft-com:datatypes\" stock exchange=\"nasdaq\" volume 100 /volume company symbol WSO2 /symbol /company price dt:type=\"number\" 55.6 /price /stock /portfolio EXAMPLE 5 @map(type='xml', enclosing.element= /root/child , enable.streaming.xml.content= true , enclosing.element.as.event= true , extract.leaf.node.data= true , fail.on.missing.attribute= false , @attributes(id = /child/@id , timestamp = /child/@timestamp , key = /child/detail/@key , value = /child/detail/@value )) define stream FooStream (id string, timestamp string, key string, value string); Above configuration will do a custom mapping and and get the child element as a whole event in the given XPath when the XML content received in a steaming manner (eg: when a file is read line by line and sent to the XML mapper to map). The attribute mapping has to be done with respect to the element mapped in the XPath which is child In here, the leaf node data is mapped to the child event as well. Expected input will look like below. root bounds minlat=\"53.4281\" minlon=\"-2.4142\" maxlat=\"54.0097\" maxlon=\"-0.9762\"/ child id=\"413229\" timestamp=\"2014-09-10T14:12:48Z\"/ child id=\"414427\" timestamp=\"2018-01-24T23:16:10Z\"/ child id=\"673959\" timestamp=\"2019-10-20T12:07:13Z\" extra id=\"1234\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"company\" value=\"wso2\"/ extra id=\"0987\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"country\" value=\"Sri Lanka\"/ /child . . /root EXAMPLE 6 @map(type='xml', enclosing.element= /root/child , enable.streaming.xml.content= true , enclosing.element.as.event= true , fail.on.missing.attribute= false , @attributes(id = /child/@id , timestamp = /child/@timestamp )) define stream FooStream (id string, timestamp string, key string, value string); Above configuration will do a custom mapping and and get the child element as a whole event in the given XPath when the XML content received in a steaming manner (eg: when a file is read line by line and sent to the XML mapper to map). The attribute mapping has to be done with respect to the element mapped in the XPath which is child Expected input will look like below. root bounds minlat=\"53.4281\" minlon=\"-2.4142\" maxlat=\"54.0097\" maxlon=\"-0.9762\"/ child id=\"413229\" timestamp=\"2014-09-10T14:12:48Z\"/ child id=\"414427\" timestamp=\"2018-01-24T23:16:10Z\"/ child id=\"673959\" timestamp=\"2019-10-20T12:07:13Z\" extra id=\"1234\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"company\" value=\"wso2\"/ extra id=\"0987\" timestamp=\"2014-09-11T10:36:37Z\"/ detail key=\"country\" value=\"Sri Lanka\"/ /child . . /root","title":"xml (Source Mapper)"}]}